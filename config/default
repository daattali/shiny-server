# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {
#	listen 80 default_server;
#	listen [::]:80 default_server ipv6only=on;
	root /usr/share/nginx/html;
	index index.html index.htm;

        listen 443 ssl;
        listen [::]:443 ssl ipv6only=on;
        ssl on;
        server_name daattali.com www.daattali.com;

        ssl_certificate /etc/letsencrypt/live/daattali.com/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/daattali.com/privkey.pem; # managed by Certbot
        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

        # Make site accessible from http://localhost/
#	server_name localhost;
#	rewrite ^(.*[^/])$ $1/ permanent;

	location /shiny/ {

		proxy_pass http://127.0.0.1:3838/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_set_header Accept-Encoding "";

		# daattali: not sure if the next line is best practice or not, but it works
		# redirects /shiny/myapp to /shiny/myapp/
	        rewrite ^(/shiny/[^/]+)$ $1/ permanent;

                sub_filter '</head>' '<script async src="https://www.googletagmanager.com/gtag/js?id=G-G7PFZ8V9VS"></script><script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag("js", new Date());
  gtag("config", "G-G7PFZ8V9VS");
</script></head>';
                sub_filter '</body>' '<div id="more-apps-by-dean" style="position: fixed;right: 0;bottom: 0;padding: 4px;text-align: center;z-index: 99999;background: rgba(0,0,0,0.8);font-size: 14px;color: #fff;"><a href="https://attalitech.com/#portfolio" style="color: #fff;">More apps by Dean</a> • <a href="https://github.com/sponsors/daattali" style="color: hotpink; font-weight: bold;">❤ Support</a></div></body>';
                sub_filter_once on;
	}

	location /rstudio/ {
                rewrite ^/rstudio/(.*)$ /$1 break;
		proxy_pass http://localhost:8787;
                proxy_redirect http://localhost:8787/ $scheme://$host/rstudio/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
	}

        location /admin/ {
                proxy_pass http://127.0.0.1:4151/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
        }

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
		# Uncomment to enable naxsi on this location
		# include /etc/nginx/naxsi.rules
	}

	location /nginx_status {
		stub_status on;
		access_log off;
		allow 127.0.0.1;
                deny all;
	}

        location ~ /.well-known {
                allow all;
        }

        error_page 500 502 503 504 /5xx.html;
        location /5xx.html {
        }
        error_page 404 /4xx.html;
        location /4xx.html {
        }


	# Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
	#location /RequestDenied {
	#	proxy_pass http://127.0.0.1:8080;    
	#}

	#error_page 404 /404.html;

	# redirect server error pages to the static page /50x.html
	#
	#error_page 500 502 503 504 /50x.html;
	#location = /50x.html {
	#	root /usr/share/nginx/html;
	#}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	#	# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
	#
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php5-fpm:
	#	fastcgi_pass unix:/var/run/php5-fpm.sock;
	#	fastcgi_index index.php;
	#	include fastcgi_params;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}


# HTTPS server
#
#server {
#	listen 443;
#	server_name localhost;
#
#	root html;
#	index index.html index.htm;
#
#	ssl on;
#	ssl_certificate cert.pem;
#	ssl_certificate_key cert.key;
#
#	ssl_session_timeout 5m;
#
#	ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
#	ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
#	ssl_prefer_server_ciphers on;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

server {
    listen 80;
    server_name daattali.com www.daattali.com;
    return 301 https://$host$request_uri;
}
